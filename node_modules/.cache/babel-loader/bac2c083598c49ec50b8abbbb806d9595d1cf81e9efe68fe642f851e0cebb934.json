{"ast":null,"code":"import e, { useState as t, useEffect as r } from \"react\";\nvar a = function (a) {\n  var n = t(\"\"),\n    o = n[0],\n    l = n[1],\n    c = t(0),\n    i = c[0],\n    s = c[1],\n    u = t(!0),\n    f = u[0],\n    p = u[1],\n    y = t(!1),\n    g = y[0],\n    h = y[1];\n  return r(function () {\n    if (!g) {\n      if (a.loop || i !== a.textArray.length - 1) {\n        var e = setInterval(function () {\n          f ? o === a.textArray[i] ? (h(!0), setTimeout(function () {\n            s((i + 1) % a.textArray.length), a.backspace ? p(!1) : l(\"\"), h(!1);\n          }, a.delaySpeed || 1500)) : l(a.textArray[i].slice(0, o.length + 1)) : \"\" === o ? p(!0) : l(o.slice(0, o.length - 1));\n        }, a.typingSpeed || 200);\n        return function () {\n          clearInterval(e);\n        };\n      }\n      l(a.textArray[i]);\n    }\n  }, [o, i, f, g, a]), /*#__PURE__*/e.createElement(\"div\", {\n    className: \"typing-container\",\n    style: {\n      fontSize: a.fontSize || \"1rem\",\n      color: a.textColor || \"black\",\n      height: a.height || \"40px\"\n    }\n  }, o, /*#__PURE__*/e.createElement(\"span\", {\n    className: \"cursor\",\n    style: {\n      backgroundColor: a.cursorColor || \"black\"\n    }\n  }, \"|\"));\n};\nexport { a as default };","map":{"version":3,"names":["a","TypingAnimator","n","t","o","l","c","i","s","u","f","p","y","g","h","r","loop","textArray","length","e","setInterval","setTimeout","backspace","delaySpeed","slice","typingSpeed","clearInterval","createElement","className","style","fontSize","color","textColor","height","backgroundColor","cursorColor","default"],"sources":["/Users/kimjeong-in/Documents/GitHub/animation_code/node_modules/react-typing-animator/src/TypingAnimation.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\n\ninterface Props {\n  /**\n   * An array of text that you want to display. Required\n   */\n  textArray: string[];\n  /**\n   * The color of the cursor\n   */\n  cursorColor?: string;\n  /**\n   * The color of the text\n   */\n  textColor?: string;\n  /**\n   * The font size of the text\n   */\n  fontSize?: string;\n  /**\n   * The typing speed. Should be an integer\n   */\n  typingSpeed?: number;\n  /**\n   * The delay speed in milliseconds\n   */\n  delaySpeed?: number;\n\n  /**\n   * Enable/disable backspace behavior\n   */\n  backspace?: boolean;\n\n  /**\n   * Height of the container in pixel. Default is 40\n   */\n  height?: string;\n  /**\n   * If you want to stop the animation after one iteration. Required.\n   */\n  loop: boolean;\n}\n\nconst TypingAnimator = (props: Props) => {\n  // ... useState and useEffect here ...\n  const [currentText, setCurrentText] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n  const [forward, setForward] = useState(true);\n  const [delay, setDelay] = useState(false);\n\n  useEffect(() => {\n    if (delay) return;\n    if (!props.loop && currentWordIndex === props.textArray.length - 1) {\n      setCurrentText(props.textArray[currentWordIndex]);\n      return; // Stop the animation\n    }\n    const interval = setInterval(() => {\n      if (forward) {\n        if (currentText === props.textArray[currentWordIndex]) {\n          setDelay(true);\n          setTimeout(() => {\n            setCurrentWordIndex(\n              (currentWordIndex + 1) % props.textArray.length\n            );\n            if (props.backspace) {\n              setForward(false);\n            } else {\n              setCurrentText(\"\");\n            }\n            setDelay(false);\n          }, props.delaySpeed || 1500);\n        } else {\n          setCurrentText(\n            props.textArray[currentWordIndex].slice(0, currentText.length + 1)\n          );\n        }\n      } else {\n        if (currentText === \"\") {\n          setForward(true);\n        } else {\n          setCurrentText(currentText.slice(0, currentText.length - 1));\n        }\n      }\n    }, props.typingSpeed || 200);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentText, currentWordIndex, forward, delay, props]);\n\n  return (\n    <div\n      className=\"typing-container\"\n      style={{\n        fontSize: props.fontSize || \"1rem\",\n        color: props.textColor || \"black\",\n        height: props.height || \"40px\",\n      }}\n    >\n      {currentText}\n      <span\n        className=\"cursor\"\n        style={{\n          backgroundColor: props.cursorColor || \"black\",\n        }}\n      >\n        |\n      </span>\n    </div>\n  );\n};\n\nexport default TypingAnimator;\n"],"mappings":";AA4CM,IAAAA,CAAA,GAAiB,SAAAC,CAACD,CAAA;EAEtB,IAAAE,CAAA,GAAsCC,CAAA,CAAS;IAAxCC,CAAA,GAAWF,CAAA;IAAEG,CAAA,GAAcH,CAAA,CAClC;IAAAI,CAAA,GAAgDH,CAAA,CAAS;IAAlDI,CAAA,GAAgBD,CAAA;IAAEE,CAAA,GAAmBF,CAAA;IAC5CG,CAAA,GAA8BN,CAAA,EAAS;IAAhCO,CAAA,GAAOD,CAAA,CAAE;IAAAE,CAAA,GAAUF,CAAA;IAC1BG,CAAA,GAA0BT,CAAA,EAAS;IAA5BU,CAAA,GAAKD,CAAA;IAAEE,CAAA,GAAQF,CAAA;EA0CtB,OAxCAG,CAAA,CAAU;IACR,KAAIF,CAAA,EAAJ;MACA,IAAKb,CAAA,CAAMgB,IAAA,IAAQT,CAAA,KAAqBP,CAAA,CAAMiB,SAAA,CAAUC,MAAA,GAAS,GAAjE;QAIA,IAAMC,CAAA,GAAWC,WAAA,CAAY;UACvBV,CAAA,GACEN,CAAA,KAAgBJ,CAAA,CAAMiB,SAAA,CAAUV,CAAA,KAClCO,CAAA,EAAS,IACTO,UAAA,CAAW;YACTb,CAAA,EACGD,CAAA,GAAmB,KAAKP,CAAA,CAAMiB,SAAA,CAAUC,MAAA,GAEvClB,CAAA,CAAMsB,SAAA,GACRX,CAAA,EAAW,KAEXN,CAAA,CAAe,KAEjBS,CAAA,EAAS,EACX;UAAA,GAAGd,CAAA,CAAMuB,UAAA,IAAc,SAEvBlB,CAAA,CACEL,CAAA,CAAMiB,SAAA,CAAUV,CAAA,EAAkBiB,KAAA,CAAM,GAAGpB,CAAA,CAAYc,MAAA,GAAS,MAIhD,OAAhBd,CAAA,GACFO,CAAA,EAAW,KAEXN,CAAA,CAAeD,CAAA,CAAYoB,KAAA,CAAM,GAAGpB,CAAA,CAAYc,MAAA,GAAS,GAG/D;QAAA,GAAGlB,CAAA,CAAMyB,WAAA,IAAe;QAExB;UACEC,aAAA,CAAcP,CAAA,CAChB;QAAA,CAhCC;MAAA;MAFCd,CAAA,CAAeL,CAAA,CAAMiB,SAAA,CAAUV,CAAA,EAFtB;IAAA;EAqCb,GAAG,CAACH,CAAA,EAAaG,CAAA,EAAkBG,CAAA,EAASG,CAAA,EAAOb,CAAA,iBAGjDmB,CAAA,CACEQ,aAAA;IAAAC,SAAA,EAAU;IACVC,KAAA,EAAO;MACLC,QAAA,EAAU9B,CAAA,CAAM8B,QAAA,IAAY;MAC5BC,KAAA,EAAO/B,CAAA,CAAMgC,SAAA,IAAa;MAC1BC,MAAA,EAAQjC,CAAA,CAAMiC,MAAA,IAAU;IAAA;EAAA,GAGzB7B,CAAA,eACDe,CAAA,CAAAQ,aAAA;IACEC,SAAA,EAAU;IACVC,KAAA,EAAO;MACLK,eAAA,EAAiBlC,CAAA,CAAMmC,WAAA,IAAe;IAAA;EAAA,GAInC,KAGb;AAAA;AAAA,SAAAnC,CAAA,IAAAoC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}